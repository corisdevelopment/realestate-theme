---
import { Icon } from "astro-icon/components";
import { Image } from "astro:assets";
import LogoImg from "../../assets/coris_development_group-logo.svg";
import CompanyInfo from "@components/utils/CompanyInfo.astro";
import { MainNavItems } from "@lib/api/settings";

const LogoImgAlt = "Coris Development Group Logo";

interface Props {
  navArray: [],
  company: {},
  class?: string,
}

const { class: className, navArray, company, } = Astro.props;

// PARSE DATA: send data as param to settings.ts function
const mainNav = MainNavItems(navArray);

---
<!-- Navbar -->
<header id="header-nav" class:list={['fixed z-40 w-full backdrop-blur-md', className]}>
  <div class="logo-area flex max-contain justify-between p-2 pt-3 lg:px-4 mx-auto">
    <a href="/" class="flex self-center px-2">
      <Image 
        src={LogoImg}
        alt={LogoImgAlt}
        loading="eager"
      />
    </a>
    <!-- Info : Right -->
    <div class="nav_info flex">
      <div class="phone_info mt-2 flex justify-end max-lg:hidden text-white border-r mr-4 pr-2">
        <div class="text-right pt-0.5">
          <CompanyInfo data={company}/>
        </div>
        <Icon name="ion:phone-portrait-outline" size={36} class="mt-1"/>
      </div>
      <!-- Mobile Menu Icon -->
      <div id="menu-toggle" class="relative self-center lg:mt-1">
        <button class="menu-open active" aria-label="open" aria-hidden="false" >
          <Icon name="menu-icon" />
        </button>
        <button class="menu-close" aria-label="close" aria-hidden="true" >
          <Icon name="closed-icon" />
        </button>
      </div>
    </div>
  </div>
  <div id="menu-wrapper" class="menu-overflow-wrapper w-full">
    <div id="menu" class="z-20 bg-black">
      <div class="container mx-auto relative px-4">
        <nav id="menu-items" class="">
          <ul>
            {mainNav.map((item: any) => (
              <li class="menu-item text-white">
                
                {item.sub ? 
                  <button class="flex dropdown-group submenu">
                    {item.title}
                    <span class="self-center pt-1 dropdown-icon">
                      <svg xmlns="http://www.w3.org/2000/svg" width="1em" height="1em" viewBox="0 0 512 512"><path fill="none" stroke="currentColor" stroke-linecap="round" stroke-linejoin="round" stroke-width="28" d="m184 112l144 144l-144 144"/></svg>
                    </span>
                  </button>
                  <ul class="submenu-group">
                    {item.sub.map( (child: any) => (
                      <li class="submenu-item flex">
                        <a href={child.link} class="item-link">{child.title}</a>
                      </li>
                    ) )}
                  </ul> 
                  :
                  <a href={item.link} class="item-link">{item.title}</a>
                }
              </li>
            ))}
          </ul>
          
        </nav>
      </div>
      <div id="menu-bgrd-pattern"></div>
      <div id="menu-bgrd-image"></div>      
    </div>
  </div>
</header>

<script>
  const menu: HTMLElement | any = document.getElementById("menu");  
  const menuButton: HTMLElement | any = document.getElementById("menu-toggle");
  const menuItems: HTMLElement | any = document.getElementById("menu-items");
  const subMenuButtons: any = document.querySelectorAll("button.submenu");
  const bgrdPattern: any = document.getElementById("menu-bgrd-pattern");
  

  // Nav toggle listener
  menuButton?.addEventListener("click", toggleMenu);
  function toggleMenu() {
    // Slide open menu from right side

    // Check scroll position height;
    const distanceY = window.scrollY || document.documentElement.scrollTop || document.body.scrollTop;
    console.log("DISTANCE: ", distanceY);

    menu.classList.toggle("menu-open");
    menuItems.classList.toggle("fade-in");
    document.body.classList.toggle("nav-open");
    
    // Change toggle icon
    changeToggleIcons();
  }

  subMenuButtons.forEach((button: any) => {
    button.addEventListener("click", (el: any) => {
      const removeList = document.querySelectorAll('.submenu-open');
      const submenu = el.target.nextElementSibling;
      el.target.children[0]?.classList.toggle("dropdown-active");
      submenu.classList.toggle("submenu-open");
      removeList.forEach((r) => {
        r.previousElementSibling?.children[0].classList.remove('dropdown-active');
        r.classList.remove('submenu-open');
      });
    });
  });

  function changeToggleIcons() {
    Array.from(menuButton.children)
    .forEach((icon: any) => {
      icon.classList.toggle("active");
      const ariaHidden = icon.getAttribute("aria-hidden") === "true";
    });
  }

  Array.from(document.querySelectorAll("#menu li"))
    .forEach((item: any, index) => {
      if(item.children.length <= 1) {
        item.onmouseover = () => {
          item.onmouseover = () => {
            menu.dataset.activeIndex = index;
            let patternPosition;
            if(index != 0) {
              patternPosition = (index + 1) * 15;
            } else {
              patternPosition = index + 15;
            }
            bgrdPattern.style.backgroundPosition = `0% -${patternPosition}%`;
          }
        }
      }
      
    })
</script>

<style>
/* Global vars are in main layout css */
/* Mobile Styles */
  #header-nav {
    height: var(--header-height);
    background-color: rgba(0, 0, 0, 0.7);
  }
  .logo-area {
    /* max-width: 1280px !important; */
  }
  #header-nav > .logo-area > a > img {
    height: 42px;
    width: auto;
  }
  #menu {
    width: 100%;
    height: 100%;
    min-height: 100vh;
    /* display: flex; */
    position: relative;
    left: 100%;
    opacity: 0.2;
    pointer-events: all;

    transition: opacity 500ms ease,
      width 800ms ease,
      left 800ms ease;
  }
  #menu > .container {
    max-width: var(--max-content);
  }
  #menu-items {
    position: relative;
    z-index: 2;
    height: max-content;
    width: max-content;
    opacity: 0.1;
    transition: opacity 600ms 600ms ease;
  }
  #menu-items ul:hover > .menu-item {
    opacity: 0.3;
  }
  #menu-items ul:hover > .menu-item:hover {
    opacity: 1;
  }

/* Toggle Styles */
  #menu-toggle {
    width: clamp(48px, 2rem, 72px);
    height: clamp(48px, 2rem, 72px);
  }
  #menu-toggle svg{
    width: 100%;
    height: 100%;
    display: inline;

    position: absolute;
    top: 0;
    left: 0;
  }
  #menu-toggle > button > svg {
    visibility: hidden;
    opacity: 0;
    transition: visibility 0ms 800ms ,opacity 800ms ease;
  }
  #menu-toggle > .active > svg {
    visibility: visible;
    opacity: 1;
    transition: opacity 800ms ease;
  }
  
/* Menu Wrapper and Menu */
  .menu-overflow-wrapper {
    /* height: calc(100vh - var(--header-height)); */
    min-height: 100vh;
    /* max-height: fit-content; */
    top: var(--header-height);
    /* width: 0; */
    overflow: hidden;
    position: absolute;
    pointer-events: none;
    z-index: 90;

    transition: width 800ms ease;
  }
  .menu-open {
    width: 100%;
    left: 0% !important;
    opacity: 1 !important;
  }
  .menu-item {
    font-size: clamp(2.5rem, 3vw, 4rem);
    font-family: 'Ibarra Real Nova', serif;
    display: block;
    text-decoration: none;
    padding: clamp(0.25rem, 0.5vw, 1rem) 0rem;
    
    transition: opacity 400ms ease;
  }
  .fade-in {
    opacity: 1 !important;
  }

/* Dropdown Styles for Submenus */
  .submenu > .dropdown-icon {
    transform: rotate(0deg);
    transition: all 400ms ease;
  }
  .dropdown-active {
    transform: rotate(-90deg) !important;
  }
  .submenu-group {
    font-size: clamp(2.2rem, 3vw, 3.4rem);
    padding-left: clamp(3rem, 4vw, 4.6rem);
    max-height: 0px;
    overflow-y: hidden;

    transition: max-height 600ms 200ms ease;
  }
  .submenu-open {
    max-height: 400px;
  }

/* Backgrounds */
  #menu-bgrd-pattern {
    height: 100%;
    width: 100%;
    
    background-image: radial-gradient(
      rgba(181,146,80, 0.1) 9%,
      transparent 9%
    );
    background-position: 0% 0%;
    background-size: 9vmin 9vmin;

    position: absolute;
    left: 0px;
    top: 0px;
    z-index: 1;

    transition: opacity 800ms ease,
    background-position 800ms ease,  
    background-size 800ms ease;
  }
  #menu .container:hover ~ #menu-bgrd-pattern {
    background-size: 7vmin 7vmin;
    opacity: 0.5;
  }
  #menu-bgrd-image {
    min-width: 100%;
    width: 100%;
    min-height: 100vh;
    height: 100vh;
    background-image: url(/unsplash_f9qZuKoZYoY.png);

    position: absolute;
    left: 0px;
    top: 0px;
    z-index: 0;
    background-position: center 30%;
    /* background-size: cover; */
    /* background-size: 130%; */
    background-repeat: no-repeat;
    opacity: 0.15;

    transition: opacity 800ms ease,
      background-size 800ms ease,
      background-position 800ms ease;
  }
  #menu .container:hover ~ #menu-bgrd-image {
    /* background-size: 180% cover; */
    /* background-position: center 30%; */
    opacity: 0.10;
  }

/* Medium Styles */
  @media screen and (max-width: 1023px) {
    #menu-bgrd-image {
      background-size: cover;
    }
    #menu .container:hover ~ #menu-bgrd-image {
      /* background-size: 120vw; */
      /* background-position: center 30%; */
    }
    
  }

  /* Desktop Styles */
  @media screen and (min-width: 1024px) {
    #header-nav {
      min-height: 80px;
    }
    #menu-bgrd-image {
      background-size: 130vw;
    }
    #menu .container:hover ~ #menu-bgrd-image {
      background-size: 120vw;
      /* background-position: center 30%; */
    }
  }
</style>